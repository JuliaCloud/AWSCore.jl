# To test, export the stack outputs and do:
# ```
# URL="https://location/of/my/fork"
# BRANCH="name-of-branch-to-test"
# aws batch submit-job \
#   --job-name AWSCoreTestJob \
#   --job-definition $JobDefinitionArn \
#   --job-queue $JobQueueArn \
#   --container-overrides \
#   "environment=[{name=AWSCORE_BRANCH,value=$BRANCH},{name=AWSCORE_URL,value=$URL}]"
# ```

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A bare bones AWS Batch environment for testing with AWSCore

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
Parameters:
  VPCCidrBlock:
    # https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html#VPC_Sizing
    Description: >-
      The IP address range used for batch instances in the new VPC.
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  MinVCPUs:
    Description: >-
      The minimum number of VCPUs to be available. Setting to 1 or higher makes jobs start
      faster but will cost us more when instances are idle. Note you cannot decrease the
      minimum number of VCPUs with a stack update.
    Type: Number
    Default: 0
  MaxVCPUs:
    Description: >-
      The maximum number of VCPUs. Typically this number does not need to be touched
    Type: Number
    Default: 16

Resources:
  AWSCoreTestJob:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        Memory: 800
        Command:
          - julia
          - -e
          - using Pkg; Pkg.add(PackageSpec(url=ENV["AWSCORE_URL"], rev=ENV["AWSCORE_BRANCH"])); Pkg.build("AWSCore"); Pkg.test("AWSCore")
        Environment:
          - Name: AWSCORE_URL
            Value: https://github.com/JuliaCloud/AWSCore.jl
          - Name: AWSCORE_BRANCH
            Value: master
        Image: julia:1.0.3
        Vcpus: 1
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    DependsOn: BatchServiceRole  # Removing the ServiceRole before deleting the ComputeEnvironment will cause issues
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: !Ref AWS::StackName
      ComputeResources:
        Type: SPOT
        BidPercentage: 100
        MinvCpus: !Ref MinVCPUs
        MaxvCpus: !Ref MaxVCPUs
        InstanceTypes:
          - optimal
        Subnets:
          - !Ref Subnet
        SecurityGroupIds:
          - !Ref SecurityGroup
        InstanceRole: !Ref IamInstanceProfile
        SpotIamFleetRole: !Ref BatchSpotFleetRole
        Tags:
          Name: !Sub "AWS Batch (${AWS::StackName})"
      ServiceRole: !Ref BatchServiceRole
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub ${AWS::StackName}
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EcsInstanceRole
  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  # http://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html
  BatchSpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group for instances launched in the VPC by Batch
      VpcId: !Ref VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: True
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet
  Route:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #============================================#

  JobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com  # Note: Shouldn't be batch.amazonaws.com
            Action: sts:AssumeRole

  # TestRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub ${AWS::StackName}-TestRole
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             AWS: !Ref CIRoleArn
  #           Action: sts:AssumeRole

  # # Necessary permissions for running the AWSBatch online tests.
  # TestPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: TestPolicy
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - batch:RegisterJobDefinition
  #             - batch:DescribeJobDefinitions
  #             - batch:DeregisterJobDefinition
  #             - batch:SubmitJob
  #             - batch:DescribeJobs
  #             - batch:DescribeJobQueues
  #             - batch:DescribeComputeEnvironments
  #           Resource: "*"
  #         - Effect: Allow
  #           Action: logs:GetLogEvents
  #           Resource: "*"
  #         - Effect: Allow
  #           Action: iam:PassRole
  #           Resource: !GetAtt JobRole.Arn

  #         # Permissions for AWSTools.stack_output
  #         - Effect: Allow
  #           Action: cloudformation:DescribeStacks
  #           Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
  #     Roles: [!Ref TestRole]

Outputs:
  JobQueueArn:
    Value: !Ref JobQueue
  JobRoleArn:
    Value: !GetAtt JobRole.Arn
  JobDefinitionArn:
    Value: !Ref AWSCoreTestJob
